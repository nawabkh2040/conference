//remove adjacent duplicates in string
#include <bits/stdc++.h>
using namespace std;
int main() {
    string s;
    cin >> s;
    stack<char>st;
    int i  = 0;
    
    for(i = 0; i<s.size();i++)
    {
        if(st.empty() || st.top()!=s[i])
        st.push(s[i]);
        else if(st.top() == s[i])
        {
            // char ch = st.top();
            st.pop();
           
        }
        
    }
    string res = "";
    while(!st.empty())
    {
        res+=st.top();
        st.pop();
    }
    reverse(res.begin(),res.end());
    cout << res << endl;
}

**************************************************************************

//remove all k adjacent duplicates in string
#include <bits/stdc++.h>
using namespace std;
int main() {
    int k;
    cin >> k;
    string s;
    cin >> s;
    vector<pair<char,int>>st;
    for(int i = 0; i<s.size();i++)
    {
        if(st.size() == 0 || st.back().first!=s[i])
        st.push_back({s[i],1});
        else
        st.back().second++;
        if(st.back().second == k)
        st.pop_back();
    }
    string res = "";
    for(int i = 0; i<st.size();i++)
    {
        res.append(st[i].second,st[i].first);
    }
    cout << res << endl;
}
***********************************************
//check valid parenthesis

//remove all k adjacent duplicates in string
#include <bits/stdc++.h>
using namespace std;
int main() {
    string s;
    cin >> s;
    stack<char>st;
    for(int i = 0; i<s.size();i++)
    {
        if(st.empty())
        st.push(s[i]);
        else if((s[i] == ')' && st.top() == '(') ||(s[i] == ']' && st.top() == '[') ||(s[i] == '}' && st.top() == '{'))
        {
            st.pop();
        }
        else
        st.push(s[i]);
    }
    if(st.size()==0)
    cout<<"YES" << endl;
    else
    cout<<"NO"<<endl;
}
********************************************************************************
//create min stack

class MinStack {
public:
    stack<int>st1,st2;
    MinStack() {
        
    }
    
    void push(int val) {
        st1.push(val);
        if(st2.empty() || val<=st2.top())
            st2.push(val);
    }
    
    void pop() {
        if(st1.top() ==getMin())
        {
            st2.pop();
           
        }
         st1.pop();
    }
    
    int top() {
        return st1.top();
    }
    
    int getMin() {
        return st2.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */


*************************************************
//stock sppan problem

vector <int> calculateSpan(int price[], int n)
    {
       // Your code here
       stack<pair<int,int>>st;
       vector<int>v;
       for(int i = 0; i<n; ii++)
       {
           int res = 1;
           while(!st.empty() && price[i]>=st.top().first)
           {
               res+=st.top().second;
               st.pop();
           }
           st.push({price[i],res});
           v.push_back(res);
       }
       
       return v;
    }